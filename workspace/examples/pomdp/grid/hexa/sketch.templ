// 4x4 grid
// from Littman, Cassandra and Kaelbling
// Learning policies for partially observable environments: Scaling up  
// Technical Report CS, Brown University

pomdp


// only the target is observable which is in the south east corner
observables
	o
endobservables

const double sl=0.1;


module grid
	
	x : [0..3]; // x coordinate
	y : [0..3]; // y coordinate
	o : [0..3]; // observables
	// 0 - initial observation
	// 1 - in the grid (not target)
	// 2 - observe target
	// 3 - bad state
		
	// initially randomly placed within the grid (not at the target)
	[] o=0 -> 1/7 : (o'=1) & (x'=0) & (y'=0)
			+ 1/7 : (o'=1) & (x'=0) & (y'=2)
			+ 1/7 : (o'=1) & (x'=1) & (y'=1)
			+ 1/7 : (o'=1) & (x'=1) & (y'=3)	
			+ 1/7 : (o'=1) & (x'=2) & (y'=0)
			+ 1/7 : (o'=1) & (x'=2) & (y'=2)
			+ 1/7 : (o'=1) & (x'=3) & (y'=1);
			//+ 1/7 : (o'=1) & (x'=3) & (y'=3);
			
	// move around the grid
	
	[south] o=1 & (x%2=0 & y=1 | x%2=1 & y=0) -> (1-sl): (o'=3) + sl: (x'=x) & (y'=y) & (o'=o);
	[south] o=1 & !(x=3 & y=2) & !(x%2=0 & y=1 | x%2=1 & y=0) -> (1-sl): (y'=max(y-2, x%2=0 ? 1 : 0)) + sl: (x'=x) & (y'=y) & (o'=o);
	[south] o=1 & (x=3) & (y=2) -> (1-sl): (y'=0) & (o'=2) + sl: (x'=x) & (y'=y) & (o'=o); // about to reach target

	[south_east] o=1 & (x=3 | (y=1 & y=2)) -> (1-sl): (o'=3) + sl: (x'=x) & (y'=y) & (o'=o);
	[south_east] o=1 & !(x=2 & y=1) & !(x=3 | (y=1 & y=2)) -> (1-sl): (y'=max(y-1, x%3=0 ? 1 : 0)) & (x'=max(x+1, 3)) + sl: (x'=x) & (y'=y) & (o'=o);
	[south_east] o=1 & (x=2) & (y=1) -> (1-sl): (y'=0) & (x'=3) & (o'=2) + sl: (x'=x) & (y'=y) & (o'=o); // about to reach target

	[south_west] o=1 & ((x=0) | (y=0 & x=1)) -> (1-sl): (o'=3) + sl: (x'=x) & (y'=y) & (o'=o);
	[south_west] o=1 & !((x=0) | (y=0 & x=1)) -> (1-sl): (y'=min(y+1, x%1=0 ? 3 : 2)) & (x'=max(x-1, 0)) + sl: (x'=x) & (y'=y) & (o'=o);

	[north] o=1 & (x%2=0 & y=3 | x%2=1 & y=2) ->  (1-sl): (o'=3) + sl: (x'=x) & (y'=y) & (o'=o);
	[north] o=1 & !(x%2=0 & y=3 | x%2=1 & y=2) -> (1-sl): (y'=min(y+2, x%1=0 ? 2 : 3)) + sl: (x'=x) & (y'=y) & (o'=o);

	[north_east] o=1 & ((x=0 & y=3) | (x=2 & y=3) | (x=3 & y=2)) -> (1-sl): (o'=3) + sl: (x'=x) & (y'=y) & (o'=o);
	[north_east] o=1 & !((x=0 & y=3) | (x=2 & y=3) | (x=3 & y=2)) -> (1-sl): (y'=min(y+1, x%1=0 ? 2 : 3)) & (x'=min(x+1, 3)) + (1-sl): (y'=min(y+2, x%1=0 ? 2 : 3));

	[north_west] o=1 & ((x=0) | (x=2 & y=3)) -> (1-sl): (o'=3) + sl: (x'=x) & (y'=y) & (o'=o);
	[north_west] o=1 & !((x=0) | (x=2 & y=3)) -> (1-sl): (y'=min(y+1, x%1=0 ? 2 : 3)) & (x'=min(x-1, 0)) + (1-sl): (y'=min(y+2, x%1=0 ? 2 : 3));


	// todo: bad states


	// reached target
	[done] o=2 -> true;
	
	//reached bad state
	[bad] o=3 -> true;
	
endmodule

// reward structure for number of steps to reach the target
rewards "steps"
        [north] true : 1;
        [north_east] true : 1;
        [north_west] true : 1;
        [south] true : 1;
        [south_east] true : 1;
        [south_west] true : 1;
endrewards

// target observation
label "goal" = o=2;
label "bad" = o=3;
